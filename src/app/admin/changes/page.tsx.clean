"use client";

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { useProducts } from '@/context/ProductContext';
import { useCategories } from '@/context/CategoryContext';
import Image from 'next/image';
import SystemLog, { logToSystem } from '@/components/SystemLog';
import MainLayout from '@/components/layout/MainLayout';
import { replaceImage } from '@/lib/cloudinary';

interface Category {
  id: string;
  name: string;
}

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  imageUrl: string;
  featured: boolean;
  inStock: boolean;
}

interface CategoryType {
  id: string;
  title: string;
  description: string;
  imageUrl: string;
  featured: boolean;
}

interface UploadStatus {
  status: 'idle' | 'uploading' | 'success' | 'error';
  progress: number;
  error?: string;
}

const productCategories: Category[] = [
  { id: 'rice', name: 'Rice' },
  { id: 'seeds', name: 'Seeds' },
  { id: 'oil', name: 'Oil' },
  { id: 'raw-polymers', name: 'Raw Polymers' },
  { id: 'bromine-salt', name: 'Bromine Salt' },
];

export default function ChangesPage() {
  const { user, isMasterAdmin } = useAuth();
  const productContext = useProducts();
  const categoryContext = useCategories();
  const router = useRouter();
  
  // State variables
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [uploadStatus, setUploadStatus] = useState<Record<string, UploadStatus>>({});
  const [systemLogs, setSystemLogs] = useState<{message: string; type: string}[]>([]);
  
  // Track overall system status
  const [systemStatus, setSystemStatus] = useState({
    productsLoaded: false,
    firestoreConnected: false,
    cloudinaryConfigured: false
  });
  
  // Modal states
  const [showAddProductModal, setShowAddProductModal] = useState(false);
  const [showAddCategoryModal, setShowAddCategoryModal] = useState(false);
  const [productToDelete, setProductToDelete] = useState<string | null>(null);
  const [categoryToDelete, setCategoryToDelete] = useState<string | null>(null);
  
  // Form states
  const [newProductForm, setNewProductForm] = useState({
    name: '',
    description: '',
    price: '',
    category: 'rice',
    imageUrl: '',
    imageFile: null as File | null,
    featured: false,
    inStock: true
  });
  
  const [newCategoryForm, setNewCategoryForm] = useState({
    title: '',
    description: '',
    imageUrl: '',
    imageFile: null as File | null,
    featured: false
  });
  
  // Destructure the context values with defaults to avoid TypeScript errors
  const { 
    products = [], 
    updateProductImage = async () => '', 
    updateFeaturedStatus = async () => {}, 
    updateStockStatus = async () => {}, 
    addProduct = async () => '', 
    removeProduct = async () => {},
    fetchProducts = async () => {}
  } = productContext || {};
  
  const { 
    categories = [], 
    updateCategoryFeaturedStatus = async () => {}, 
    updateCategoryImage = async () => '', 
    addCategory = async () => '', 
    removeCategory = async () => {},
    fetchCategories = async () => {}
  } = categoryContext || {};
  
  // Check if required context values are available
  if (!products.length && !categories.length && !loading) {
    console.error('ProductContext or CategoryContext is not properly initialized in ChangesPage');
    return <MainLayout><div className="p-8">Error loading products or categories</div></MainLayout>;
  }

  // Handle image upload for products
  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>, productId: string) => {
    if (e.target.files && e.target.files[0]) {
      await handleProductImageUpload(productId, e.target.files[0]);
    }
  };
  
  // Handle product image upload
  const handleProductImageUpload = async (productId: string, file: File) => {
    try {
      if (!productId) {
        throw new Error('Product ID is required');
      }
      
      setUploadStatus(prev => ({
        ...prev,
        [productId]: { status: 'uploading', progress: 0 }
      }));

      const imageUrl = await replaceImage(file, `product-${productId}`);
      
      if (!imageUrl) {
        throw new Error('Failed to upload image');
      }

      // Update product with new image URL
      await updateProductImage(productId, imageUrl);
      
      setUploadStatus(prev => ({
        ...prev,
        [productId]: { status: 'success', progress: 100 }
      }));
      
      logToSystem('success', `Updated image for product ${productId}`);
      
      // Refresh product list
      fetchProducts();
    } catch (err) {
      console.error('Error uploading product image:', err);
      if (productId) {
        setUploadStatus(prev => ({
          ...prev,
          [productId]: { 
            status: 'error', 
            progress: 0, 
            error: err instanceof Error ? err.message : String(err)
          }
        }));
      }
      logToSystem('error', `Failed to update image for product ${productId}: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  // Handle category image upload
  const handleCategoryImageUpload = async (categoryId: string, file: File) => {
    try {
      if (!categoryId) {
        throw new Error('Category ID is required');
      }
      
      setUploadStatus(prev => ({
        ...prev,
        [categoryId]: { status: 'uploading', progress: 0 }
      }));

      const imageUrl = await replaceImage(file, `category-${categoryId}`);
      
      if (!imageUrl) {
        throw new Error('Failed to upload image');
      }

      // Update category with new image URL
      await updateCategoryImage(categoryId, imageUrl);
      
      setUploadStatus(prev => ({
        ...prev,
        [categoryId]: { status: 'success', progress: 100 }
      }));
      
      logToSystem('success', `Updated image for category ${categoryId}`);
      
      // Refresh category list
      fetchCategories();
    } catch (err) {
      console.error('Error uploading category image:', err);
      if (categoryId) {
        setUploadStatus(prev => ({
          ...prev,
          [categoryId]: { 
            status: 'error', 
            progress: 0, 
            error: err instanceof Error ? err.message : String(err)
          }
        }));
      }
      logToSystem('error', `Failed to update image for category ${categoryId}: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  // Handle category file input change
  const handleCategoryFileChange = (e: React.ChangeEvent<HTMLInputElement>, categoryId: string) => {
    if (e.target.files && e.target.files[0]) {
      handleCategoryImageUpload(categoryId, e.target.files[0]);
    }
  };
  
  // Handle featured status toggle for products
  const handleToggleFeatured = async (productId: string, featured: boolean) => {
    try {
      await updateFeaturedStatus(productId, featured);
      logToSystem('success', `Product ${productId} featured status set to ${featured}`);
    } catch (err) {
      logToSystem('error', `Failed to update featured status: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  // Handle featured status toggle for categories
  const handleToggleCategoryFeatured = async (categoryId: string, featured: boolean) => {
    try {
      await updateCategoryFeaturedStatus(categoryId, featured);
      logToSystem('success', `Category ${categoryId} featured status set to ${featured}`);
    } catch (err) {
      logToSystem('error', `Failed to update category featured status: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  useEffect(() => {
    // Set loading to false once we have user data
    if (user !== undefined) {
      setLoading(false);
    }
    
    // Redirect if not master admin
    if (user && !isMasterAdmin) {
      router.push('/admin');
    }
    
    // Log system initialization
    if (user && isMasterAdmin) {
      logToSystem('info', 'Admin changes page loaded');
      if (user.email) {
        logToSystem('info', `Logged in as: ${user.email}`);
      }
      
      // Update system status
      setSystemStatus(prev => ({
        ...prev,
        productsLoaded: products && products.length > 0,
        firestoreConnected: true,
        cloudinaryConfigured: true
      }));
      
      // Check if products are loaded
      if (products && products.length > 0) {
        logToSystem('success', `${products.length} products loaded from context`);
      } else {
        logToSystem('warning', 'No products loaded from context');
      }
      
      // Check if categories are loaded
      if (categories && categories.length > 0) {
        logToSystem('success', `${categories.length} categories loaded from context`);
      } else {
        logToSystem('warning', 'No categories loaded from context');
      }
      
      // Check if Firestore is connected
      logToSystem('info', 'Firestore connection established');
      
      // Check if Cloudinary is configured
      logToSystem('info', 'Cloudinary configuration loaded');
    }
  }, [user, isMasterAdmin, router, products, categories]);

  useEffect(() => {
    // Listen for product updates
    const handleProductUpdate = () => {
      fetchProducts();
      logToSystem('info', 'Products updated');
    };
    
    window.addEventListener('productUpdated', handleProductUpdate);
    
    return () => {
      window.removeEventListener('productUpdated', handleProductUpdate);
    };
  }, [fetchProducts]);
  
  useEffect(() => {
    // Listen for category updates
    const handleCategoryUpdate = () => {
      fetchCategories();
      logToSystem('info', 'Categories updated');
    };
    
    window.addEventListener('categoryUpdated', handleCategoryUpdate);
    
    return () => {
      window.removeEventListener('categoryUpdated', handleCategoryUpdate);
    };
  }, [fetchCategories]);

  // Clear system logs
  const clearSystemLogs = () => {
    setSystemLogs([]);
  };
  
  // Handle new product form changes
  const handleProductFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setNewProductForm(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle new product form file changes
  const handleProductFormFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setNewProductForm(prev => ({
        ...prev,
        imageFile: e.target.files![0]
      }));
    }
  };
  
  // Handle new category form changes
  const handleCategoryFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewCategoryForm(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle new category form file changes
  const handleCategoryFormFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setNewCategoryForm(prev => ({
        ...prev,
        imageFile: e.target.files![0]
      }));
    }
  };

  // Handle product form submission
  const handleAddProduct = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Validate form
      if (!newProductForm.name || !newProductForm.description || !newProductForm.price || !newProductForm.category) {
        throw new Error('Please fill in all required fields');
      }
      
      if (!newProductForm.imageFile) {
        throw new Error('Please select an image');
      }
      
      // Add product
      const productId = await addProduct({
        name: newProductForm.name,
        description: newProductForm.description,
        price: parseFloat(newProductForm.price),
        category: newProductForm.category,
        imageUrl: '', // Will be updated after image upload
        featured: newProductForm.featured,
        inStock: newProductForm.inStock
      });
      
      if (!productId) {
        throw new Error('Failed to add product');
      }
      
      // Upload image
      await handleProductImageUpload(productId, newProductForm.imageFile);
      
      // Reset form
      setNewProductForm({
        name: '',
        description: '',
        price: '',
        category: 'rice',
        imageUrl: '',
        imageFile: null,
        featured: false,
        inStock: true
      });
      
      // Close modal
      setShowAddProductModal(false);
      
      // Log success
      logToSystem('success', `Added new product: ${newProductForm.name}`);
    } catch (err) {
      console.error('Error adding product:', err);
      logToSystem('error', `Failed to add product: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  // Handle category form submission
  const handleAddCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Validate form
      if (!newCategoryForm.title || !newCategoryForm.description) {
        throw new Error('Please fill in all required fields');
      }
      
      if (!newCategoryForm.imageFile) {
        throw new Error('Please select an image');
      }
      
      // Add category
      const categoryId = await addCategory({
        title: newCategoryForm.title,
        description: newCategoryForm.description,
        imageUrl: '', // Will be updated after image upload
        featured: newCategoryForm.featured
      });
      
      if (!categoryId) {
        throw new Error('Failed to add category');
      }
      
      // Upload image
      await handleCategoryImageUpload(categoryId, newCategoryForm.imageFile);
      
      // Reset form
      setNewCategoryForm({
        title: '',
        description: '',
        imageUrl: '',
        imageFile: null,
        featured: false
      });
      
      // Close modal
      setShowAddCategoryModal(false);
      
      // Log success
      logToSystem('success', `Added new category: ${newCategoryForm.title}`);
    } catch (err) {
      console.error('Error adding category:', err);
      logToSystem('error', `Failed to add category: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  // Handle product deletion
  const handleDeleteProduct = async () => {
    if (!productToDelete) return;
    
    try {
      await removeProduct(productToDelete);
      setProductToDelete(null);
      logToSystem('success', `Deleted product ${productToDelete}`);
    } catch (err) {
      logToSystem('error', `Failed to delete product: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  // Handle category deletion
  const handleDeleteCategory = async () => {
    if (!categoryToDelete) return;
    
    try {
      await removeCategory(categoryToDelete);
      setCategoryToDelete(null);
      logToSystem('success', `Deleted category ${categoryToDelete}`);
    } catch (err) {
      logToSystem('error', `Failed to delete category: ${err instanceof Error ? err.message : String(err)}`);
    }
  };

  if (!isMasterAdmin) {
    return null; // Will redirect in useEffect
  }

  if (loading) {
    return (
      <MainLayout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <h1 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              Admin Dashboard
            </h1>
            <p className="mt-3 text-xl text-gray-500">
              Manage your B2B showcase system
            </p>
          </div>

        {/* System Log */}
        <div className="mb-12 bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-900">System Log</h2>
            <button 
              onClick={() => {
                // Clear logs
                window.localStorage.setItem('systemLogs', JSON.stringify([]));
                window.dispatchEvent(new Event('logsCleared'));
              }}
              className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
            >
              Clear
            </button>
          </div>

          <div className="bg-gray-100 rounded-md p-4 h-64 overflow-y-auto font-mono text-sm">
            <SystemLog />
          </div>
        </div>

        {/* System Status */}
        <div className="mb-12 bg-white rounded-lg shadow-md p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">System Status</h2>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className={`p-4 rounded-lg ${systemStatus.productsLoaded ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-4 h-4 rounded-full mr-2 ${systemStatus.productsLoaded ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <h3 className="font-medium">Products</h3>
              </div>
              <p className="text-sm mt-1">
                {systemStatus.productsLoaded ? `${products.length} products loaded` : 'No products loaded'}
              </p>
            </div>

            <div className={`p-4 rounded-lg ${systemStatus.firestoreConnected ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-4 h-4 rounded-full mr-2 ${systemStatus.firestoreConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <h3 className="font-medium">Firestore</h3>
              </div>
              <p className="text-sm mt-1">
                {systemStatus.firestoreConnected ? 'Connected' : 'Connection issues'}
              </p>
            </div>

            <div className={`p-4 rounded-lg ${systemStatus.cloudinaryConfigured ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-4 h-4 rounded-full mr-2 ${systemStatus.cloudinaryConfigured ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <h3 className="font-medium">Cloudinary</h3>
              </div>
              <p className="text-sm mt-1">
                {systemStatus.cloudinaryConfigured ? 'Configured' : 'Configuration issues'}
              </p>
            </div>
          </div>
        </div>

        {/* Add Category Modal */}
        {showAddCategoryModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">Add New Category</h2>
                  <button 
                    onClick={() => setShowAddCategoryModal(false)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <AddCategoryForm 
                  onSubmit={handleAddCategory}
                  onCancel={() => setShowAddCategoryModal(false)}
                />
              </div>
            </div>
          </div>
        )}

        {/* Delete Product Confirmation Modal */}
        {productToDelete && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
              <div className="p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4">Delete Product</h2>
                <p className="text-gray-600 mb-6">Are you sure you want to delete this product? This action cannot be undone.</p>

                <div className="flex justify-end gap-4">
                  <button 
                    onClick={() => setProductToDelete(null)}
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button 
                    onClick={handleDeleteProduct}
                    className="px-4 py-2 bg-red-600 rounded-md text-white hover:bg-red-700 transition-colors"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Delete Category Confirmation Modal */}
        {categoryToDelete && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
              <div className="p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4">Delete Category</h2>
                <p className="text-gray-600 mb-6">Are you sure you want to delete this category? This action cannot be undone.</p>

                <div className="flex justify-end gap-4">
                  <button 
                    onClick={() => setCategoryToDelete(null)}
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button 
                    onClick={handleDeleteCategory}
                    className="px-4 py-2 bg-red-600 rounded-md text-white hover:bg-red-700 transition-colors"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  </MainLayout>
  );
}

// AddProductForm component
const AddProductForm = ({ onSubmit, onCancel }: { onSubmit: (e: React.FormEvent) => void; onCancel: () => void }) => (
  <form onSubmit={onSubmit} className="space-y-4">
    <h2 className="text-xl font-bold">Add New Product</h2>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Name</label>
      <input
        type="text"
        name="name"
        value={newProductForm.name}
        onChange={handleProductFormChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        required
      />
    </div>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Description</label>
      <textarea
        name="description"
        value={newProductForm.description}
        onChange={handleProductFormChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        required
        rows={3}
      ></textarea>
    </div>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Price</label>
      <input
        type="number"
        name="price"
        value={newProductForm.price}
        onChange={handleProductFormChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        required
        step="0.01"
        min="0"
      />
    </div>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Category</label>
      <select
        name="category"
        value={newProductForm.category}
        onChange={handleProductFormChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        required
      >
        {productCategories.map((category) => (
          <option key={category.id} value={category.id}>{category.name}</option>
        ))}
      </select>
    </div>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Image</label>
      <input
        type="file"
        name="imageFile"
        onChange={handleProductFormFileChange}
        className="mt-1 block w-full"
        accept="image/*"
        required
      />
    </div>
    
    <div className="flex items-center">
      <input
        type="checkbox"
        name="featured"
        checked={newProductForm.featured}
        onChange={(e) => setNewProductForm(prev => ({ ...prev, featured: e.target.checked }))}
        className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
      />
      <label className="ml-2 block text-sm text-gray-900">Featured</label>
    </div>
    
    <div className="flex items-center">
      <input
        type="checkbox"
        name="inStock"
        checked={newProductForm.inStock}
        onChange={(e) => setNewProductForm(prev => ({ ...prev, inStock: e.target.checked }))}
        className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
      />
      <label className="ml-2 block text-sm text-gray-900">In Stock</label>
    </div>
    
    <div className="flex justify-end space-x-3">
      <button
        type="button"
        onClick={onCancel}
        className="inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        Cancel
      </button>
      <button
        type="submit"
        className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        Add Product
      </button>
    </div>
  </form>
);

// AddCategoryForm component
const AddCategoryForm = ({ onSubmit, onCancel }: { onSubmit: (e: React.FormEvent) => void; onCancel: () => void }) => (
  <form onSubmit={onSubmit} className="space-y-4">
    <h2 className="text-xl font-bold">Add New Category</h2>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Title</label>
      <input
        type="text"
        name="title"
        value={newCategoryForm.title}
        onChange={handleCategoryFormChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        required
      />
    </div>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Description</label>
      <textarea
        name="description"
        value={newCategoryForm.description}
        onChange={handleCategoryFormChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        required
        rows={3}
      ></textarea>
    </div>
    
    <div>
      <label className="block text-sm font-medium text-gray-700">Image</label>
      <input
        type="file"
        name="imageFile"
        onChange={handleCategoryFormFileChange}
        className="mt-1 block w-full"
        accept="image/*"
        required
      />
    </div>
    
    <div className="flex items-center">
      <input
        type="checkbox"
        name="featured"
        checked={newCategoryForm.featured}
        onChange={(e) => setNewCategoryForm(prev => ({ ...prev, featured: e.target.checked }))}
        className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
      />
      <label className="ml-2 block text-sm text-gray-900">Featured</label>
    </div>
    
    <div className="flex justify-end space-x-3">
      <button
        type="button"
        onClick={onCancel}
        className="inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        Cancel
      </button>
      <button
        type="submit"
        className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        Add Category
      </button>
    </div>
  </form>
);

// DeleteProductModal component
const DeleteProductModal = ({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) => {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg max-w-md w-full">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Confirm Deletion</h3>
        <p className="text-gray-500 mb-6">Are you sure you want to delete this product? This action cannot be undone.</p>
        
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={onConfirm}
            className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
};

// DeleteCategoryModal component
const DeleteCategoryModal = ({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) => {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg max-w-md w-full">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Confirm Deletion</h3>
        <p className="text-gray-500 mb-6">Are you sure you want to delete this category? This action cannot be undone.</p>
        
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={onConfirm}
            className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700"
          >
            Delete
          </button>
      </div>
      <p className="text-sm mt-1">
        {systemStatus.firestoreConnected ? 'Connected' : 'Connection issues'}
      </p>
    </div>
    
    <div className={`p-4 rounded-lg ${systemStatus.cloudinaryConfigured ? 'bg-green-100' : 'bg-red-100'}`}>
      <div className="flex items-center">
        <div className={`w-4 h-4 rounded-full mr-2 ${systemStatus.cloudinaryConfigured ? 'bg-green-500' : 'bg-red-500'}`}></div>
        <h3 className="font-medium">Cloudinary</h3>
      </div>
      <p className="text-sm mt-1">
        {systemStatus.cloudinaryConfigured ? 'Configured' : 'Configuration issues'}
      </p>
    </div>
  </div>
</div>

// ... (rest of the code remains the same)
            
            <div className={`p-4 rounded-lg ${systemStatus.firestoreConnected ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-4 h-4 rounded-full mr-2 ${systemStatus.firestoreConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <h3 className="font-medium">Firestore</h3>
              </div>
              <p className="text-sm mt-1">
                {systemStatus.firestoreConnected ? 'Connected' : 'Connection issues'}
              </p>
            </div>
            
            <div className={`p-4 rounded-lg ${systemStatus.cloudinaryConfigured ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-4 h-4 rounded-full mr-2 ${systemStatus.cloudinaryConfigured ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <h3 className="font-medium">Cloudinary</h3>
              </div>
              <p className="text-sm mt-1">
                {systemStatus.cloudinaryConfigured ? 'Configured' : 'Configuration issues'}
              </p>
            </div>
          </div>
        </div>
        
        {error && (
          <div className="mb-8 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}
        
        {/* Product Management Section */}
        <div className="mb-12 bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Product Management</h2>
              <p className="text-gray-600">Manage products and featured status (maximum 3 featured).</p>
            </div>
            <button 
              onClick={() => setShowAddProductModal(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
              </svg>
              Add New Product
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {products.map((product: any) => (
              <div key={product.id} className="border rounded-lg p-4 bg-white hover:shadow-md transition-shadow">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center">
                    <div className="w-12 h-12 relative rounded overflow-hidden mr-3">
                      <Image
                        src={product.imageUrl || '/placeholder-image.jpg'}
                        alt={product.name}
                        fill
                        className="object-cover"
                      />
                    </div>
                    <div>
                      <h3 className="font-medium">{product.name}</h3>
                      <p className="text-sm text-gray-500">{product.category}</p>
                    </div>
                  </div>
                  <button
                    onClick={() => setProductToDelete(product.id)}
                    className="text-red-500 hover:text-red-700 p-1 rounded-full hover:bg-red-50 transition-colors"
                    title="Delete product"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </button>
                </div>
                
                <div className="flex flex-col sm:flex-row gap-3 justify-between">
                  {/* Featured Toggle */}
                  <div className="flex items-center justify-between border rounded p-2">
                    <span className="text-sm font-medium mr-3">Featured</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer"
                        checked={product.featured || false}
                        onChange={async () => {
                          try {
                            // If trying to enable and already have 3 featured products
                            if (!product.featured) {
                              const featuredCount = products.filter(p => p.featured).length;
                              if (featuredCount >= 3) {
                                alert('You can only feature up to 3 products. Please unfeature one first.');
                                return;
                              }
                            }
                            
                            await updateFeaturedStatus(product.id, !product.featured);
                            logToSystem(`Product ${product.name} is now ${!product.featured ? 'featured' : 'unfeatured'}`, 'success');
                          } catch (error) {
                            logToSystem(`Error updating featured status: ${error instanceof Error ? error.message : String(error)}`, 'error');
                          }
                        }}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      <span className="ms-3 text-sm font-medium text-gray-900">
                        {product.featured ? 'Featured' : 'Not Featured'}
                      </span>
                    </label>
                  </div>
                  
                  {/* In Stock Toggle */}
                  <div className="flex items-center justify-between border rounded p-2">
                    <span className="text-sm font-medium mr-3">Stock Status</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer"
                        checked={product.inStock !== false} // Default to true if undefined
                        onChange={async () => {
                          try {                            
                            await updateStockStatus(product.id, !(product.inStock !== false));
                            logToSystem(`Product ${product.name} is now ${!(product.inStock !== false) ? 'in stock' : 'out of stock'}`, 'success');
                          } catch (error) {
                            logToSystem(`Error updating stock status: ${error instanceof Error ? error.message : String(error)}`, 'error');
                          }
                        }}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                      <span className="ms-3 text-sm font-medium text-gray-900">
                        {product.inStock !== false ? 'In Stock' : 'Out of Stock'}
                      </span>
                    </label>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* Category Management Section */}
        <div className="mb-12 bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Category Management</h2>
              <p className="text-gray-600">Manage categories and featured status (maximum 3 featured).</p>
            </div>
            <button 
              onClick={() => setShowAddCategoryModal(true)}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
              </svg>
              Add New Category
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {categories.map((category) => (
              <div key={category.id} className="border rounded-lg p-4 bg-white hover:shadow-md transition-shadow">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center">
                    <div className="w-16 h-16 relative rounded overflow-hidden mr-3">
                      <Image
                        src={category.image || '/placeholder-image.jpg'}
                        alt={category.title}
                        fill
                        className="object-cover"
                      />
                    </div>
                    <div>
                      <h3 className="font-medium">{category.title}</h3>
                      <p className="text-sm text-gray-500">{category.productCount} products</p>
                    </div>
                  </div>
                  <button
                    onClick={() => setCategoryToDelete(category.id)}
                    className="text-red-500 hover:text-red-700 p-1 rounded-full hover:bg-red-50 transition-colors"
                    title="Delete category"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </button>
                </div>
                
                <div className="flex flex-col gap-3 justify-between">
                  {/* Featured Toggle */}
                  <div className="flex items-center justify-between border rounded p-2">
                    <span className="text-sm font-medium mr-3">Featured</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer"
                        checked={category.featured || false}
                        onChange={async () => {
                          try {
                            // If trying to enable and already have 3 featured categories
                            if (!category.featured) {
                              const featuredCount = categories.filter(c => c.featured).length;
                              if (featuredCount >= 3) {
                                alert('You can only feature up to 3 categories. Please unfeature one first.');
                                return;
                              }
                            }
                            
                            await updateCategoryFeaturedStatus(category.id, !category.featured);
                            logToSystem(`Category ${category.title} is now ${!category.featured ? 'featured' : 'unfeatured'}`, 'success');
                          } catch (error) {
                            logToSystem(`Error updating featured status: ${error instanceof Error ? error.message : String(error)}`, 'error');
                          }
                        }}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      <span className="ms-3 text-sm font-medium text-gray-900">
                        {category.featured ? 'Featured' : 'Not Featured'}
                      </span>
                    </label>
                  </div>
                  
                  {/* Category Image Upload */}
                  <div className="mt-2">
                    <label 
                      htmlFor={`category-image-upload-${category.id}`}
                      className="flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md cursor-pointer transition-colors w-full"
                    >
                      <div className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                        </svg>
                        {uploadStatus[`category-${category.id}`]?.isUploading ? 'Uploading...' : 'Update Image'}
                      </div>
                    </label>
                    <input
                      id={`category-image-upload-${category.id}`}
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={(e) => handleCategoryImageUpload(e, category.id)}
                    />
                    
                    {/* Upload Status Messages */}
                    {uploadStatus[`category-${category.id}`]?.error && (
                      <p className="text-red-500 text-xs mt-1">{uploadStatus[`category-${category.id}`].error}</p>
                    )}
                    {uploadStatus[`category-${category.id}`]?.success && (
                      <p className="text-green-500 text-xs mt-1">Image updated successfully!</p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Product Cards Section */}
        <div className="grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8">
          {products.map((product: any) => (
            <div key={`card-${product.id}`} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="relative h-64 w-full">
                <Image
                  src={product.imageUrl || '/placeholder-image.jpg'}
                  alt={product.name}
                  fill
                  className="object-cover"
                  priority
                />
              </div>
              
              <div className="p-4">
                <h3 className="text-lg font-medium text-gray-900">{product.name}</h3>
                <p className="mt-1 text-sm text-gray-500">{product.category}</p>
                <p className="mt-1 text-sm text-gray-500 truncate">{product.description}</p>
                
                <div className="mt-4">
                  <label 
                    htmlFor={`image-upload-${product.id}`}
                    className="flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md cursor-pointer transition-colors w-full"
                  >
                    <div className="flex items-center gap-2">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                      </svg>
                      {uploadStatus[product.id]?.isUploading ? 'Uploading...' : 'Replace Image'}
                    </div>
                  </label>
                  <input
                    id={`image-upload-${product.id}`}
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleImageUpload(e, product.id)}
                    disabled={uploadStatus[product.id]?.isUploading}
                    className="hidden"
                  />
                  
                  {uploadStatus[product.id]?.error && (
                    <p className="text-red-500 mt-2 text-sm">{uploadStatus[product.id].error}</p>
                  )}
                  
                  {uploadStatus[product.id]?.success && (
                    <p className="text-green-500 mt-2 text-sm">Image updated successfully!</p>
                  )}
                  
                  <p className="text-xs text-gray-500 mt-2">
                    Last updated: {product.updatedAt?.toLocaleString() || 'Never'}
                    {product.updatedBy && <> by {product.updatedBy}</>}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <div className="mt-12 max-w-7xl mx-auto">
        <div className="bg-white rounded-lg shadow-md p-4 mb-6">
          <h2 className="text-xl font-bold mb-4">System Status</h2>
          <div className="grid grid-cols-3 gap-4">
            <div className={`p-3 rounded-lg ${systemStatus.productsLoaded ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-2 ${systemStatus.productsLoaded ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <span className="font-medium">Products Loaded</span>
              </div>
            </div>
            <div className={`p-3 rounded-lg ${systemStatus.firestoreConnected ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-2 ${systemStatus.firestoreConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <span className="font-medium">Firestore Connected</span>
              </div>
            </div>
            <div className={`p-3 rounded-lg ${systemStatus.cloudinaryConfigured ? 'bg-green-100' : 'bg-red-100'}`}>
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-2 ${systemStatus.cloudinaryConfigured ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <span className="font-medium">Cloudinary Configured</span>
              </div>
            </div>
          </div>
        </div>
        
        <SystemLog maxEntries={100} />
      </div>
    </div>
  );
}
